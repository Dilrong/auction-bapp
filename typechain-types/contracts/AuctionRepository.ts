/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface AuctionRepositoryInterface extends utils.Interface {
  functions: {
    "auctionBids(uint256,uint256)": FunctionFragment;
    "auctionOwner(address,uint256)": FunctionFragment;
    "auctions(uint256)": FunctionFragment;
    "bidOnAuction(uint256)": FunctionFragment;
    "cancelAuction(uint256)": FunctionFragment;
    "createAuction(address,uint256,string,string,uint256,uint256)": FunctionFragment;
    "finalizeAuction(uint256)": FunctionFragment;
    "getAuctionById(uint256)": FunctionFragment;
    "getAuctionsCountOfOwner(address)": FunctionFragment;
    "getAuctionsOf(address)": FunctionFragment;
    "getBidsCount(uint256)": FunctionFragment;
    "getCount()": FunctionFragment;
    "getCurrentBid(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "auctionBids"
      | "auctionOwner"
      | "auctions"
      | "bidOnAuction"
      | "cancelAuction"
      | "createAuction"
      | "finalizeAuction"
      | "getAuctionById"
      | "getAuctionsCountOfOwner"
      | "getAuctionsOf"
      | "getBidsCount"
      | "getCount"
      | "getCurrentBid"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "auctionBids",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionOwner",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "auctions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bidOnAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createAuction",
    values: [string, BigNumberish, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionsCountOfOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionsOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBidsCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCurrentBid",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "auctionBids",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "auctions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bidOnAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionsCountOfOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionsOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBidsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentBid",
    data: BytesLike
  ): Result;

  events: {
    "AuctionCanceled(address,uint256)": EventFragment;
    "AuctionCreated(address,uint256)": EventFragment;
    "AuctionFinalized(address,uint256)": EventFragment;
    "BidSuccess(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuctionCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidSuccess"): EventFragment;
}

export interface AuctionCanceledEventObject {
  _owner: string;
  _auctionId: BigNumber;
}
export type AuctionCanceledEvent = TypedEvent<
  [string, BigNumber],
  AuctionCanceledEventObject
>;

export type AuctionCanceledEventFilter = TypedEventFilter<AuctionCanceledEvent>;

export interface AuctionCreatedEventObject {
  _owner: string;
  _auctionId: BigNumber;
}
export type AuctionCreatedEvent = TypedEvent<
  [string, BigNumber],
  AuctionCreatedEventObject
>;

export type AuctionCreatedEventFilter = TypedEventFilter<AuctionCreatedEvent>;

export interface AuctionFinalizedEventObject {
  _owner: string;
  _auctionId: BigNumber;
}
export type AuctionFinalizedEvent = TypedEvent<
  [string, BigNumber],
  AuctionFinalizedEventObject
>;

export type AuctionFinalizedEventFilter =
  TypedEventFilter<AuctionFinalizedEvent>;

export interface BidSuccessEventObject {
  _from: string;
  _auctionId: BigNumber;
}
export type BidSuccessEvent = TypedEvent<
  [string, BigNumber],
  BidSuccessEventObject
>;

export type BidSuccessEventFilter = TypedEventFilter<BidSuccessEvent>;

export interface AuctionRepository extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AuctionRepositoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    auctionBids(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { from: string; amount: BigNumber }>;

    auctionOwner(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    auctions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        string,
        string,
        boolean,
        boolean
      ] & {
        name: string;
        blockDeadline: BigNumber;
        startPrice: BigNumber;
        metadata: string;
        deedId: BigNumber;
        deedRepositoryAddress: string;
        owner: string;
        active: boolean;
        finalized: boolean;
      }
    >;

    bidOnAuction(
      _auctionId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelAuction(
      _auctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createAuction(
      _deedRepositoryAddress: string,
      _deedId: BigNumberish,
      _auctionTitle: string,
      _metadata: string,
      _startPrice: BigNumberish,
      _blockDeadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finalizeAuction(
      _auctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAuctionById(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        string,
        string,
        boolean,
        boolean
      ] & {
        name: string;
        blockDeadline: BigNumber;
        startPrice: BigNumber;
        metadata: string;
        deedId: BigNumber;
        deedRepositoryAddress: string;
        owner: string;
        active: boolean;
        finalized: boolean;
      }
    >;

    getAuctionsCountOfOwner(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAuctionsOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getBidsCount(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentBid(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string]>;
  };

  auctionBids(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { from: string; amount: BigNumber }>;

  auctionOwner(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  auctions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      string,
      string,
      boolean,
      boolean
    ] & {
      name: string;
      blockDeadline: BigNumber;
      startPrice: BigNumber;
      metadata: string;
      deedId: BigNumber;
      deedRepositoryAddress: string;
      owner: string;
      active: boolean;
      finalized: boolean;
    }
  >;

  bidOnAuction(
    _auctionId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelAuction(
    _auctionId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createAuction(
    _deedRepositoryAddress: string,
    _deedId: BigNumberish,
    _auctionTitle: string,
    _metadata: string,
    _startPrice: BigNumberish,
    _blockDeadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finalizeAuction(
    _auctionId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAuctionById(
    _auctionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      string,
      string,
      boolean,
      boolean
    ] & {
      name: string;
      blockDeadline: BigNumber;
      startPrice: BigNumber;
      metadata: string;
      deedId: BigNumber;
      deedRepositoryAddress: string;
      owner: string;
      active: boolean;
      finalized: boolean;
    }
  >;

  getAuctionsCountOfOwner(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAuctionsOf(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getBidsCount(
    _auctionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCount(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentBid(
    _auctionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string]>;

  callStatic: {
    auctionBids(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { from: string; amount: BigNumber }>;

    auctionOwner(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    auctions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        string,
        string,
        boolean,
        boolean
      ] & {
        name: string;
        blockDeadline: BigNumber;
        startPrice: BigNumber;
        metadata: string;
        deedId: BigNumber;
        deedRepositoryAddress: string;
        owner: string;
        active: boolean;
        finalized: boolean;
      }
    >;

    bidOnAuction(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelAuction(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createAuction(
      _deedRepositoryAddress: string,
      _deedId: BigNumberish,
      _auctionTitle: string,
      _metadata: string,
      _startPrice: BigNumberish,
      _blockDeadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    finalizeAuction(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAuctionById(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        string,
        string,
        boolean,
        boolean
      ] & {
        name: string;
        blockDeadline: BigNumber;
        startPrice: BigNumber;
        metadata: string;
        deedId: BigNumber;
        deedRepositoryAddress: string;
        owner: string;
        active: boolean;
        finalized: boolean;
      }
    >;

    getAuctionsCountOfOwner(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionsOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getBidsCount(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCount(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentBid(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string]>;
  };

  filters: {
    "AuctionCanceled(address,uint256)"(
      _owner?: null,
      _auctionId?: null
    ): AuctionCanceledEventFilter;
    AuctionCanceled(
      _owner?: null,
      _auctionId?: null
    ): AuctionCanceledEventFilter;

    "AuctionCreated(address,uint256)"(
      _owner?: null,
      _auctionId?: null
    ): AuctionCreatedEventFilter;
    AuctionCreated(_owner?: null, _auctionId?: null): AuctionCreatedEventFilter;

    "AuctionFinalized(address,uint256)"(
      _owner?: null,
      _auctionId?: null
    ): AuctionFinalizedEventFilter;
    AuctionFinalized(
      _owner?: null,
      _auctionId?: null
    ): AuctionFinalizedEventFilter;

    "BidSuccess(address,uint256)"(
      _from?: null,
      _auctionId?: null
    ): BidSuccessEventFilter;
    BidSuccess(_from?: null, _auctionId?: null): BidSuccessEventFilter;
  };

  estimateGas: {
    auctionBids(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    auctionOwner(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    auctions(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    bidOnAuction(
      _auctionId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelAuction(
      _auctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createAuction(
      _deedRepositoryAddress: string,
      _deedId: BigNumberish,
      _auctionTitle: string,
      _metadata: string,
      _startPrice: BigNumberish,
      _blockDeadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finalizeAuction(
      _auctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAuctionById(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionsCountOfOwner(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionsOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBidsCount(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCount(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentBid(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    auctionBids(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    auctionOwner(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    auctions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bidOnAuction(
      _auctionId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelAuction(
      _auctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createAuction(
      _deedRepositoryAddress: string,
      _deedId: BigNumberish,
      _auctionTitle: string,
      _metadata: string,
      _startPrice: BigNumberish,
      _blockDeadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finalizeAuction(
      _auctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAuctionById(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuctionsCountOfOwner(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuctionsOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBidsCount(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentBid(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
